question,options,answer,explanation,topic,difficulty,chapter
What is a Context-Free Grammar (CFG) formally defined as?,"['A triple consisting of variables, terminals, and rules.', 'A quadruple consisting of variables, terminals, rules, and a start symbol.', 'A quintuple consisting of variables, terminals, rules, a start symbol, and an alphabet.', 'A set of production rules and a start symbol.']",B,"A CFG is formally defined as a quadruple (V, Σ, R, S), where V is the set of variables, Σ is the set of terminals, R is the set of rules, and S is the start symbol.",Introduction to Context Free Grammar (CFG),Medium,6.2
"In a CFG, what is the term for elements belonging to V - Σ?","['Terminals', 'Variables', 'Non-terminals', 'Productions']",C,Elements in V - Σ (the set of variables minus the set of terminals) are called non-terminals.,Introduction to Context Free Grammar (CFG),Easy,6.2
What is a derivation in a CFG?,"['A set of rules defining the grammar.', 'A sequence of substitutions starting with the start symbol and resulting in a string.', 'The final string generated by the grammar.', 'A subset of the terminal symbols.']",B,A derivation is a sequence of steps that apply production rules to transform the start symbol into a terminal string.,Introduction to Context Free Grammar (CFG),Medium,6.2
Which of the following is NOT a component of a Context-Free Grammar?,"['A set of variables (V)', 'A set of terminals (Σ)', 'A set of productions (R)', 'A parsing table']",D,A parsing table is used in parsing algorithms but is not a fundamental component of the CFG definition.,Introduction to Context Free Grammar (CFG),Easy,6.2
What type of set is the set of terminals (Σ) in a CFG?,"['An infinite set', 'A finite set', 'An empty set', 'A recursive set']",B,The set of terminals is always a finite set.,Introduction to Context Free Grammar (CFG),Easy,6.2
What is the label of the root node in a derivation tree for a grammar G?,"[' A terminal symbol from ∑', "" The empty string 'e'"", ' A non-terminal symbol representing the start symbol of the grammar', ' Any symbol from V ∪ ∑']",C,The root node of a derivation tree always represents the start symbol (S) of the grammar.,Derivative trees,Easy,6.2
"In a derivation tree, what type of symbol labels the leaf nodes?","['Non-terminal symbols from V', ' Production rules from R', ""Terminal symbols from ∑ or the empty string 'e'"", 'Interior vertices']",C,"Leaf nodes represent terminal symbols (from the alphabet ∑) or the empty string (e), signifying the completion of a derivation step.",Derivative trees,Easy,6.2
"What condition must be satisfied by the production rules of a grammar G, concerning the labels of a node and its children in the corresponding derivation tree?","[""The parent node's label must be longer than the combined length of its children's labels."", ""The parent node's label must be equal to the combined length of its children's labels."", ' If a vertex has label A and children labeled a1, a2, … an, then A → a1 a2 … an must be a production in G.', ""There is no direct relation between a node's label and its children's labels.""]",C,The production rules of the grammar must directly reflect the relationship between a node and its children in the derivation tree.,Derivative trees,Medium,6.2
Which of the following best describes an interior vertex in a derivation tree?,"['A node that has only one child', 'A node that is a leaf node', 'A node that has at least one child', 'A node labeled with a terminal symbol']",C,Interior vertices are nodes that are not leaf nodes and thus have at least one child.,Derivative trees,Easy,6.2
"If a derivation tree has a leaf node labeled 'e', what does this indicate?","['An error in the derivation', 'The grammar is ambiguous', 'The empty string is part of the language generated by the grammar.', 'The derivation is incomplete.']",C,A leaf node labeled 'e' indicates that the empty string is a valid part of the derivation sequence.,Derivative trees,Medium,6.2
Which of the following best describes a bottom-up parsing approach?,"['Starts from the root of the parse tree and works downwards.', 'Starts from the leaves of the parse tree and works upwards.', ' Uses a leftmost derivation to build the parse tree.', 'Uses a rightmost derivation to build the parse tree.']",B,Bottom-up parsing begins with the input string (leaves) and reduces it to the start symbol (root) of the grammar.,Bottom-up approach,Easy,6.2
"In the context of pushdown automata (PDA), what is the primary role of the stack?","['To store the input string.', 'To track the state transitions of the automaton.', 'To temporarily store symbols for parsing and context-free grammar recognition.', 'To manage the order of operations during computation.']",C,The stack in a PDA is crucial for remembering the context during parsing of context-free languages.  It's not simply storing input or states.,Bottom-up approach,Medium,6.2
A context-free grammar (CFG) is used to define which type of language?,"['Regular languages', 'Context-sensitive languages', 'Context-free languages', 'Recursive enumerable languages']",C,"By definition, context-free grammars generate context-free languages.",Bottom-up approach,Easy,6.2
What is a common algorithm used for bottom-up parsing?,"['Recursive Descent Parsing', 'LL(1) Parsing', 'LR Parsing', 'CYK Algorithm']",C,"LR parsing (e.g., LR(0), LALR, LR(1)) is a family of bottom-up parsing algorithms.",Bottom-up approach,Medium,6.2
"Consider a grammar with the rule S → aSb | ε. Which parsing approach, top-down or bottom-up, would be more naturally suited to handle this grammar's recursive structure?","['Top-down parsing', 'Bottom-up parsing', 'Both equally well', 'Neither is suitable']",B,Bottom-up parsing handles recursive rules like S → aSb more naturally as it can easily reduce the string 'aSb' back to S.  Top-down may face difficulties with left recursion.,Bottom-up approach,Medium,6.2
Which of the following best describes a top-down parsing approach?,"['Starts with the complete sentence and breaks it down into smaller constituents.', 'Starts with individual words and builds up to the complete sentence.', 'Uses a stack to manage grammar rules during parsing.', 'Primarily relies on a transition table to guide the parsing process.']",A,Top-down parsing begins with the start symbol of the grammar and attempts to derive the input string by successively applying production rules.,Top-down approach,Easy,6.2
"In the context of compiler design, what is the primary purpose of a parser?","['To translate assembly code into machine code.', 'To perform lexical analysis on the source code.', 'To generate intermediate code from the abstract syntax tree.', 'To analyze the syntax of the source code and build a parse tree or abstract syntax tree.']",D,The parser's role is to check the grammatical correctness of the source code based on the defined grammar and create a structured representation.,Top-down approach,Easy,6.2
A pushdown automaton (PDA) is primarily characterized by which of the following?,"[' A finite state machine with a stack.', 'A finite state machine with a queue.', 'A Turing machine with a limited memory.', ' A context-free grammar without recursion.']",A,"A PDA is defined by its finite control, a stack, input alphabet, and transition function.",Top-down approach,Medium,6.2
What type of grammar is typically used with top-down parsing techniques?,"['Regular grammar', 'Context-sensitive grammar', 'Context-free grammar', 'Type-0 grammar']",C,"Top-down parsing algorithms, such as recursive descent, are generally designed for context-free grammars.",Top-down approach,Medium,6.2
Left recursion in a grammar can cause what problem for top-down parsing?,"['Increased parsing speed.', 'Improved error detection.', 'Infinite loops.', 'Reduced memory consumption.']",C,Left recursion leads to an infinite loop in top-down parsers because the parser would repeatedly apply the same recursive rule without making progress.,Top-down approach,Medium,6.2
"In a context-free grammar, what does a leftmost derivation represent?","['A sequence of rule applications where the leftmost variable is always rewritten first.', 'A sequence of rule applications where the rightmost variable is always rewritten first.', 'A sequence of rule applications in any order.', 'A parse tree representation of the grammar.']",A,A leftmost derivation systematically replaces the leftmost non-terminal symbol in each step.,Leftmost derivation,Easy,6.2
Which of the following is NOT a characteristic of a leftmost derivation in a context-free grammar?,"[' It always replaces the leftmost variable.', 'It generates a unique derivation for every string.', 'It can be represented as a sequence of rule applications.', 'It might generate different parse trees for ambiguous grammars.']",B,Ambiguous grammars can have multiple leftmost derivations for the same string.,Leftmost derivation,Medium,6.2
What is the relationship between a leftmost derivation and a parse tree in a context-free grammar?,"['They are completely unrelated concepts.', 'A leftmost derivation directly corresponds to a specific parse tree.', 'A parse tree can represent multiple leftmost derivations.', 'A leftmost derivation is only possible for certain types of parse trees.']",B,"Each leftmost derivation corresponds to a unique parse tree, and vice-versa.",Leftmost derivation,Medium,6.2
"If A ⇒* w in a context-free grammar, where A is a non-terminal and w is a terminal string, what can we conclude?","['There is no possible derivation from A to w.', 'There exists at least one leftmost derivation from A to w.', 'There exists only a rightmost derivation from A to w.', 'The grammar is inherently ambiguous.']",B,"If A derives w, then at least one leftmost (and one rightmost) derivation must exist.",Leftmost derivation,Medium,6.2
"Consider a context-free grammar G = (V, Σ, R, S).  Which symbol represents the start symbol in this notation?","['V', 'Σ', 'R', 'S']",D,S conventionally represents the start symbol in the standard notation for context-free grammars.,Leftmost derivation,Easy,6.2
What is a rightmost derivation in the context of formal grammars?,"['A derivation where the leftmost non-terminal symbol is replaced at each step.', 'A derivation where the rightmost non-terminal symbol is replaced at each step.', 'A derivation where the non-terminal symbols are replaced in an arbitrary order.', 'A derivation that produces a parse tree with a specific structure.']",B,"A rightmost derivation is a sequence of grammar rule applications where, at each step, the rightmost non-terminal symbol in the string is replaced.",Rightmost derivation,Medium,6.2
"In a context-free grammar G = (V, Σ, R, S), what does V represent?","['The set of terminal symbols.', 'The set of production rules.', 'The start symbol.', 'The set of variables or non-terminal symbols.']",D,V represents the vocabulary or the set of variables (non-terminal symbols) in the grammar.,Rightmost derivation,Easy,6.2
"If A ⇒* w in a context-free grammar, what does this notation signify?","['A directly derives w in one step.', 'A derives w in zero or more steps.', 'A does not derive w.', 'A derives w only through a leftmost derivation.']",B,A ⇒* w indicates that the non-terminal symbol A derives the terminal string w in zero or more steps.,Rightmost derivation,Medium,6.2
What is a parse tree in the context of formal language theory?,"['A graphical representation of a leftmost derivation.', 'A graphical representation of a derivation showing the hierarchical structure of a sentence.', 'A sequence of grammar rules applied in a derivation.', 'A representation of the terminal symbols of a grammar.']",B,"A parse tree visually represents the hierarchical structure of a sentence generated by a grammar, showing how the grammar rules were applied to derive the sentence.  While it *can* represent a leftmost or rightmost derivation, it's not limited to those.",Rightmost derivation,Medium,6.2
Which of the following is NOT a component of a context-free grammar?,"['A set of terminal symbols (Σ)', 'A set of production rules (R)', 'A set of semantic rules', 'A start symbol (S)']",C,Context-free grammars define the syntax of a language; semantic rules are separate and deal with meaning.,Rightmost derivation,Easy,6.2
"What does the notation ""u * v"" signify in the context of formal grammar?","['u is a substring of v', 'u directly derives v in one step', 'u derives v in zero or more steps', 'u and v are identical strings']",C,"The asterisk (*) indicates the reflexive and transitive closure of the derivation relation, meaning u can derive v through zero or more steps.",Language of a grammar,Medium,6.2
"In a grammar, what is a derivation?","['A single production rule application', 'A sequence of production rule applications generating a string', 'The set of all possible strings generated by the grammar', 'The starting symbol of the grammar']",B,"A derivation is a sequence of steps, each involving the application of a production rule, transforming a string into another.",Language of a grammar,Easy,6.2
"If a derivation has 'n' steps, what does 'n' represent?","['The number of non-terminal symbols in the derivation', 'The number of terminal symbols in the final string', 'The number of production rules applied in the derivation', 'The length of the final string produced']",C,"'n' represents the number of steps in the derivation, where each step corresponds to the application of a single production rule.",Language of a grammar,Medium,6.2
What does the notation  A  w represent within the context of a grammar G?,"[' String w is a substring of non-terminal A.', 'Non-terminal A derives string w directly.', ' String w is a prefix of non-terminal A.', 'Non-terminal A is a prefix of string w.']",B,This notation indicates that production rule A can be replaced directly with string w in grammar G.,Language of a grammar,Medium,6.2
The notation W0 G W1 G ... G Wn describes what?,"['A single production rule in grammar G.', 'A derivation of Wn from W0 in grammar G.', ' The language generated by grammar G.', 'The set of terminal symbols in grammar G.']",B,"This describes a derivation sequence, showing the step-by-step transformation from W0 to Wn using production rules in grammar G.",Language of a grammar,Easy,6.2
What is the primary purpose of parsing in the context of compilation?,"['To execute code directly.', 'To translate code into machine language.', 'To extract the meaning of the code.', 'To optimize the code for faster execution.']",C) To extract the meaning of the code.,"Parsing is the process of analyzing the code to understand its structure and meaning before translating it.  While translation (B) is a consequence, the core function is meaning extraction (C).",Parse tree and its construction,Easy,6.2
A derivation tree is most closely associated with which process?,"['Code optimization', 'Code execution', 'String recognition', 'Memory allocation']",C) String recognition,"A derivation tree visually represents the grammatical structure of a string, showing how it's derived from the grammar rules. This is directly related to recognizing if the string is grammatically correct according to the language's rules.",Parse tree and its construction,Medium,6.2
What is the output of a successful parsing process?,"['An executable file', 'A derivation tree', 'Optimized code', 'A lexical analysis']",B) A derivation tree,"A parse tree (or derivation tree) is a graphical representation of the grammatical structure of the parsed string, showing how it's built from the grammatical rules of the programming language.",Parse tree and its construction,Easy,6.2
Which of the following best describes the relationship between parsing and compilation?,"['Parsing is independent of compilation.', 'Compilation is a subset of parsing.', 'Parsing is a crucial step within compilation.', 'Compilation precedes parsing.']",C) Parsing is a crucial step within compilation.,Parsing is an essential stage in the compilation process where the compiler analyzes the code to understand its structure and meaning before generating machine code.,Parse tree and its construction,Medium,6.2
"What does ""parsing a string"" fundamentally entail?","['Converting a string into a numerical format.', 'Finding a derivation for that string.', 'Removing unnecessary characters from a string.', 'Storing a string in memory.']",B) Finding a derivation for that string.,"Parsing a string involves determining its grammatical structure and validating it according to the rules of the language, which is represented as a derivation.",Parse tree and its construction,Easy,6.2
What defines an ambiguous string in the context of context-free grammar?,"['A string with only one leftmost derivation.', 'A string with no leftmost derivation.', 'A string with two or more different leftmost derivations.', 'A string with a single, unambiguous derivation.']",C,"An ambiguous string, by definition, has multiple ways to derive it using leftmost derivations within the context-free grammar.",Ambiguous grammar,Medium,6.2
A context-free grammar is considered ambiguous if it:,"['Generates only unambiguous strings.', 'Generates at least one ambiguous string.', 'Cannot generate any strings.', 'Generates only strings with a single rightmost derivation.']",B,Ambiguity in a grammar is defined by its ability to generate at least one string with multiple leftmost derivations.,Ambiguous grammar,Medium,6.2
"If a grammar G is unambiguous, what can be said about the strings it generates?","['All generated strings have at least two leftmost derivations.', 'All generated strings have at most one leftmost derivation.', ' Some generated strings have multiple leftmost derivations.', 'It generates only strings that cannot be parsed.']",B,Unambiguous grammars ensure each string has a unique leftmost derivation.,Ambiguous grammar,Medium,6.2
"The term ""inherently ambiguous"" refers to:","['Grammars that can always be rewritten to be unambiguous.', 'Strings that have only one possible derivation.', 'Context-free languages that can only be generated by ambiguous grammars.', 'Grammars that generate only strings with rightmost derivations.']",C,Inherently ambiguous languages are those that cannot be described by any unambiguous grammar.,Ambiguous grammar,Medium,6.2
Which of the following statements is TRUE regarding ambiguous grammars?,"['All ambiguous grammars can be easily transformed into unambiguous grammars.', 'Ambiguous grammars always produce syntactically incorrect strings.', 'An unambiguous grammar can always be found to generate the same language as an ambiguous grammar.', 'Some context-free languages are inherently ambiguous and can only be generated by ambiguous grammars.']",D,This statement correctly reflects the existence of inherently ambiguous context-free languages.,Ambiguous grammar,Easy,6.2
Which of the following production rules is NOT allowed in Chomsky Normal Form (CNF)?,"['A → BC', 'A → a', 'A → ε', 'A → AB']",C,"Chomsky Normal Form only allows productions of the form A → BC or A → a, where A, B, and C are non-terminal symbols and 'a' is a terminal symbol.  ε represents the empty string, which is explicitly disallowed in CNF.",Chomsky Normal Form (CNF),Medium,6.2
"In Chomsky Normal Form, what do the symbols 'NT' and 'T' typically represent?","['Terminal and Non-terminal', 'Non-terminal and Terminal', ' Transition and Terminal', ' Non-terminal and Transition']",B,NT represents Non-terminal symbols and T represents Terminal symbols within the context of formal grammar definitions.,Chomsky Normal Form (CNF),Easy,6.2
A grammar containing productions like A → BCD needs what kind of transformation before it can be converted to Chomsky Normal Form?,"['Unit Production Elimination', ' ε-production Elimination', 'Terminal Elimination', ' Left Recursion Elimination']",C,Productions with more than two symbols on the right-hand side (like A → BCD) must be broken down into productions with at most two symbols before a grammar can be in Chomsky Normal Form. This involves eliminating terminals from right-hand sides of length greater than one.,Chomsky Normal Form (CNF),Medium,6.2
What is the first step typically involved in converting a context-free grammar to Chomsky Normal Form?,"['Eliminating left recursion', 'Converting to Greibach Normal Form', 'Eliminating unit productions and ε-productions', ' Introducing new non-terminals']",C,The initial step in converting a context-free grammar to Chomsky Normal Form is usually the removal of unit productions (A → B where A and B are non-terminals) and ε-productions (A → ε).,Chomsky Normal Form (CNF),Medium,6.2
"Which of the following is a valid production rule in CNF where A, B, and C are non-terminals and 'a' is a terminal?","['A → aBC', 'A → a', 'A → BC', ' B → aBC']","B, C","Both A → a and A → BC are valid production rules in CNF.  Option A violates CNF because it has more than two symbols on the right-hand side, and option D has more than two symbols on the right-hand side.",Chomsky Normal Form (CNF),Easy,6.2
What is a characteristic of a grammar that is inherently ambiguous?,"['It can be easily converted to an unambiguous grammar.', 'It generates only context-free languages.', 'No unambiguous grammar exists for the language it generates.', 'It always produces multiple parse trees for the same sentence.']",C,"An inherently ambiguous language is defined as one for which no unambiguous grammar can be created. While option D is often a consequence, it's not the defining characteristic.",Greibach Normal Form (GNF),Medium,6.2
Which of the following is a normal form used for simplifying context-free grammars?,"[' Backus-Naur Form (BNF)', ' Chomsky Normal Form (CNF)', ' Regular Normal Form (RNF)', ' Extended Backus-Naur Form (EBNF)']",B,Chomsky Normal Form (CNF) is a standard normal form for context-free grammars.  The other options are related but not normal forms in the same sense.,Greibach Normal Form (GNF),Easy,6.2
Greibach Normal Form (GNF) and Chomsky Normal Form (CNF) are both:,"['Types of regular expressions.', 'Methods for parsing ambiguous grammars.', 'Normal forms for context-free grammars.', ' Techniques for minimizing the states of a finite automaton.']",C,Both GNF and CNF are ways to standardize the structure of context-free grammars.,Greibach Normal Form (GNF),Easy,6.2
What distinguishes Greibach Normal Form (GNF) from other normal forms for context-free grammars?,"['Its use in minimizing the number of production rules.', 'Its restriction on the form of the production rules.', 'Its ability to handle only unambiguous grammars.', 'Its application solely to regular languages.']",B,Each normal form has specific restrictions on the structure of its production rules; GNF's is unique.,Greibach Normal Form (GNF),Medium,6.2
"In the context of formal language theory, what does the term ""inherently ambiguous"" describe?","['A grammar that is too complex to parse.', 'A language for which no unambiguous grammar exists.', 'A grammar with multiple start symbols.', 'A language that violates the pumping lemma.']",B,An inherently ambiguous language is a language that inherently cannot be described by an unambiguous grammar.,Greibach Normal Form (GNF),Medium,6.2
"In Backus-Naur Form (BNF), what is the typical maximum number of variables allowed on the right-hand side of a production in Chomsky Normal Form (CNF)?","['One', 'Two', 'Three', 'Unlimited']",B,Chomsky Normal Form (CNF) is a restricted form of context-free grammar where productions are limited to have at most two variables on the right-hand side.,Backus-Naur Form (BNF),Medium,6.2
"What does the symbol 'S' typically represent in a formal grammar definition like G = (V, Σ, R, S)?","['A terminal symbol', 'A production rule', 'The start symbol', 'A variable representing the vocabulary']",C,"'S' conventionally denotes the start symbol in a grammar, from which all other strings are derived.",Backus-Naur Form (BNF),Easy,6.2
Which of the following is NOT a characteristic of a context-free grammar in Chomsky Normal Form (CNF)?,"['All productions are of the form A → BC or A → a', ' All non-terminal symbols appear on the left-hand side of at least one production.', 'The grammar may contain epsilon productions (A → ε).', 'The start symbol does not appear on the right-hand side of any production.']",C,Chomsky Normal Form strictly excludes epsilon productions (productions that produce an empty string).,Backus-Naur Form (BNF),Medium,6.2
Consider a grammar with productions S → aSb and S → ε. Is this grammar in Chomsky Normal Form (CNF)?,"['Yes', 'No, because it contains an ε-production.', 'No, because the production S → aSb is not in CNF format.', 'No, because it contains more than two variables on the RHS of a production.']",B,The presence of the ε-production (S → ε) violates the rules of CNF.,Backus-Naur Form (BNF),Medium,6.2
A grammar in Chomsky Normal Form (CNF) is a type of:,"['Regular grammar', 'Context-sensitive grammar', 'Context-free grammar', 'Turing machine']",C,CNF is a restricted form of context-free grammar.,Backus-Naur Form (BNF),Easy,6.2
What is the set of input symbols (∑) for the pushdown automaton M described?,"['{p, q}', '{S, a, b, c}', '{a, b, c}', '{e, S, a, b, c}']",C,"The passage explicitly defines the input alphabet ∑ as {a, b, c}.",Push down automata,Easy,6.2
Which state in the pushdown automaton M is the initial state (S)?,"['q', 'p', 'S', ' e']",B,The passage states that the initial state S is p.,Push down automata,Easy,6.2
What is the role of the 'e' symbol in the transition function ∆ of the pushdown automaton?,"['It represents an error state.', 'It represents the empty string or null input.', 'It represents the final state.', 'It represents the start symbol on the stack.']",B,"In the context of pushdown automata, 'e' typically represents the empty string or the absence of an input symbol.",Push down automata,Medium,6.2
What is the set of stack symbols (Γ) for the pushdown automaton M?,"['{a, b, c}', '{p, q}', '{S, a, b, c}', '{e}']",C,"The passage clearly defines the stack alphabet Γ as {S, a, b, c}.",Push down automata,Easy,6.2
Which of the following transitions pops 'a' from the stack?,"['((q, e, S), (q, aSa))', '((q, e, S), (q, e))', '((q, a, a), (q, e))', '((q, e, S), (q, bSb))']",C,"The transition ((q, a, a), (q, e)) reads 'a' from the input and pops 'a' from the stack, replacing it with the empty string 'e'.",Push down automata,Medium,6.2
Which type of Pushdown Automata (PDA) is often used to demonstrate the equivalence between Context-Free Languages (CFLs) and PDAs?,"['Non-deterministic Finite Automata (NFA) PDA', 'Deterministic Finite Automata (DFA) PDA', 'Empty Stack PDA', 'Turing Machine PDA']",C,"Empty Stack PDAs and Final State PDAs are both used in proofs regarding CFLs and PDAs, but the Empty Stack PDA is more commonly used to show equivalence.",Equivalence of context free language and PDA,Medium,6.2
What is a key concept demonstrated by the equivalence theorem relating Context-Free Languages (CFLs) and Pushdown Automata (PDAs)?,"['All regular languages are context-free.', 'All context-sensitive languages are context-free.', ' The same set of languages can be recognized by both CFLs and PDAs.', 'PDAs are more powerful than Turing Machines.']",C,The theorem establishes that both formalisms define the same class of languages.,Equivalence of context free language and PDA,Easy,6.2
A proof of the equivalence between Context-Free Languages and Pushdown Automata typically involves proving which two lemmas?,"['Lemma 1: Every CFG is accepted by some PDA; Lemma 2: Every PDA accepts a regular language.', 'Lemma 1: Every CFL is accepted by some PDA; Lemma 2: If a language is accepted by a PDA, it is a CFL.', 'Lemma 1: Every PDA accepts a recursive language; Lemma 2: Every CFL is decidable.', 'Lemma 1: Every regular language is a CFL; Lemma 2: Every PDA accepts a regular language.']",B,These two lemmas directly address the inclusion of CFLs in the set of PDA-accepted languages and vice-versa.,Equivalence of context free language and PDA,Medium,6.2
What is the primary goal of constructing a PDA equivalent to a given Context-Free Grammar (CFG)?,"['To prove that CFGs are more powerful than PDAs.', 'To demonstrate that the CFG can only accept regular languages.', 'To show that a given CFL can be accepted by a PDA.', 'To simplify the CFG for easier analysis.']",C,"The construction aims to show that any language generated by a CFG can also be accepted by a PDA, a key step in proving equivalence.",Equivalence of context free language and PDA,Easy,6.2
"In the context of proving the equivalence of Context-Free Languages and Pushdown Automata, what does the construction of a PDA equivalent to a CFG illustrate?","['The limitations of PDAs in recognizing languages.', 'The inherent complexity of context-free languages.', 'The capacity of PDAs to accept context-free languages.', 'The superiority of CFGs over PDAs.']",C,This construction directly demonstrates one half of the equivalence theorem—that all CFLs are accepted by some PDA.,Equivalence of context free language and PDA,Medium,6.2
What is the condition on the length of the string 'w' in the Pumping Lemma for Regular Languages?,"['|w| < n', '|w| ≤ n', '|w| ≥ n', '|w| = n']",C,"The Pumping Lemma states that for a regular language L, there exists an integer n such that any string w in L with length greater than or equal to n can be pumped.",Pumping lemma for context free language,Easy,6.2
"In the Pumping Lemma for Regular Languages, what must be true about the substring 'y'?","['y = e (empty string)', 'y ≠ e (not an empty string)', '|y| > n', '|y| = n']",B,The substring 'y' cannot be an empty string; it must have a length greater than zero for the pumping process to be meaningful.,Pumping lemma for context free language,Easy,6.2
"According to the Pumping Lemma for Regular Languages, what condition must be met concerning the length of the substring 'xy'?","['|xy| > n', '|xy| ≥ n', '|xy| < n', '|xy| ≤ n']",D,The lemma specifies that the combined length of substrings 'x' and 'y' must be less than or equal to n.,Pumping lemma for context free language,Medium,6.2
"Which of the following strings, derived from the Pumping Lemma, is guaranteed to also be in the regular language L, for any non-negative integer i?","['xyz', 'xyyz', 'xyiz', 'xy<sup>i</sup>z']",D,The Pumping Lemma states that xy<sup>i</sup>z (where <sup>i</sup> represents the substring 'y' repeated i times) will always be a member of the language L for any non-negative integer i.,Pumping lemma for context free language,Medium,6.2
The Pumping Lemma provides a method to prove which of the following?,"['A language is context-free.', 'A language is regular.', 'A language is not regular.', 'A language is not context-free.']",C,The Pumping Lemma is primarily used to prove that a language is *not* regular.  It is a proof by contradiction technique.,Pumping lemma for context free language,Medium,6.2
Which of the following best describes a context-free grammar?,"['A grammar where the production rules depend entirely on the surrounding context of a non-terminal symbol.', 'A grammar where the production rules are independent of the surrounding context of a non-terminal symbol.', 'A grammar that only generates strings of a specific length.', 'A grammar that can only generate regular languages.']",B,Context-free grammars are defined by their independence from the surrounding context when applying production rules.,Properties of context free Language,Easy,6.2
"In a context-free grammar, what is the term 'context' referring to?","['The length of the string being generated.', 'The surrounding symbols of a non-terminal symbol in a production rule.', 'The specific type of grammar being used.', 'The order of operations in the production rules.']",B,The context refers to the symbols immediately preceding and following a non-terminal symbol within a production rule.,Properties of context free Language,Easy,6.2
A production rule like A → aA is context-free because:,"['It only applies to the start symbol.', 'It depends on the surrounding symbols of A.', 'It can be applied regardless of the surrounding symbols of A.', 'It generates only a single terminal symbol.']",C,The key characteristic of context-free rules is their independence from surrounding context.,Properties of context free Language,Medium,6.2
What type of language is generated by a context-free grammar?,"['Only regular languages.', 'Only context-sensitive languages.', 'Context-free languages.', 'Only languages with a finite number of strings.']",C,"Context-free grammars, by definition, generate context-free languages.",Properties of context free Language,Easy,6.2
Consider the production rule S → aaAb.  The symbol 'A' is in what context?,"[""No context, as it's the start symbol."", ""The context of 'a' only."", ""The context of 'aa' and 'b'."", ""The context of 'b' only.""]",C,"The symbol 'A' is directly preceded by 'aa' and followed by 'b'; hence, it is within the context of 'aa' and 'b'.",Properties of context free Language,Medium,6.2
