So, we donâ€™t need to worry about any of the leaves.Start
from the level above the leaf nodes, and work out backward towards the root.Second
Phase:Note that the root (the first element of the array) has the largest key.Repeat
these steps until the size of heap becomes 1;Move the largest key at root to the last
position of the heap, replacing an entryx currently at the last position;Decrease a
counter i that keeps track of the size of the heap, thereby excluding the largest key
from further sorting;The element x may not belong to the root of the heap, so insert
x into theproper position to restore the heap property.Adjusting the Heap
Properties:When the last element, x, is replaced by the largest element at the root, a
hole is created at the root and the heap size becomes smaller by 1;We must move x
somewhere to restore the heap property;First we look if x can be placed in the hole,
by looking at the two children of that hole;If x belongs to the hole, then we put x
there and we are done;Else we slide the larger of the two children to the hole, thus
pushing the hole downone level;We repeat this process on the subtree until x can be
placed in the hole or there are no children;Thus, our action is to place x in its correct
spot along a path from the root containing minimum children.