of elements to sort:
"); scanf("%d",&n); printf("\nEnter
elements to sort:\n"); for (i = 0; i < n;
i++) scanf("%d",&x[i]); //perform
merge sort on array msort(x,temp,0,n-1);
void msort(int x[], int temp[], int left, int
right)
{ int mid;
if(left<right)
{
mid = (right + left) / 2; msort(x,
temp, left, mid); msort(x,
temp, mid+1, right);
merge(x, temp, left, mid+1, right);
}
}
printf("Sorted List \n");
for (i = 0; i < n; i++)
printf("%d\n", x[i]);
getch(); }
void merge(int x[], int temp[], int left, int
mid, int right)
{ int i, lend, no_element, tmpos;
lend = mid - 1; tmpos = left;
no_element = right - left + 1;
while ((left <= lend) && (mid <= right))
{ if (x[left] <= x[mid])
{ temp[tmpos] = x[left];
tmpos = tmpos + 1; left =
left +1; }
else
{ temp[tmpos] = x[mid];
tmpos = tmpos + 1;
mid = mid + 1;
}
}
while (left <= lend)
{ temp[tmpos] =
x[left]; left = left + 1;
tmpos = tmpos + 1; }
while (mid <= right)
{ temp[tmpos] = x[mid]; mid
= mid + 1; tmpos = tmpos +
1; } for (i=0; i <= no_element;
i++)
{ x[right] = temp[right];
right = right - 1;
}
}

Soring
15
â€¢
Efficiency:No.